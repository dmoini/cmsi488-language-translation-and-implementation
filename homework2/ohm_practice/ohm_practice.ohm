CanadianPostalCode {
  exp               = (firstAlpha + digit approvedAlpha + space +  digit + approvedAlpha + digit)              --code
  firstAlpha        = ~badFirst upper
  approvedAlpha     = ~badAlpha upper 
  badAlpha          = "D" | "F" | "I" | "O" | "Q" | "U"
  badFirst          = badAlpha | "W" | "Z"
}

LegalVisaCard {
  exp               = "4" lastDigits
  threeDigits       = digit digit digit
  lastDigits        = threeDigits threeDigits threeDigits threeDigits (threeDigits)?
}

LegalMasterCard {
  exp               = (firstDigits lastDigits)
  firstDigits       = caseA | caseB
  caseA             = ("5" "1".."5") digit digit          --51-55
  caseB             = "222" digit                         --2220-2229
                    | "22" "3".."9" digit                 --2230-2299
                    | "2" "3".."6" digit digit            --2300-2699
                    | "27" "0".."1" digit                 --2700-2719
                    | "2720"                              --2720
  fourDigits        = digit digit digit digit
  lastDigits        = fourDigits fourDigits fourDigits 
}

AdaNumericLiteral {
  // TODO
}

BasicLatin1 {
	exp = overThreeString | threeString |  oneTwoStrings
    oneTwoStrings = letter (letter)?
    threeString = letter ~(caseInsensitive<"oo">) letter letter 
    overThreeString = letter letter letter letter+
}

BinaryDivisibleByThirtyTwo {
  // TODO
}

DecimalTwoToThirtySix {
  // TODO
}

NonNestingMLStyle {
	comment = "(*"  exp  "*)" 
  exp =  exp exp        --sentences
         | letter+      --words
         | space        --spaces   
}

BasicLatin2 {
  // i did the wrong one oops
}

BasicLatin3 {
  // not sure if it should accept things like files
	exp = ~(badWords) (letter)*
    badWords = "file" | "for" | "find"
}