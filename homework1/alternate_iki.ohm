// TODO: Make the Iki interpreter function according to this code:

// int x, y;
// while (y - 5) {
//     int y;
//     STDIN -> x;
//     STDIN -> y;
//     x <- 2 * (3 + y);
// }
// STDOUT <- 5;

// CURRENT:
//   var x :int  ;       var y   : int;
//         while y - 5 == 3 loop
//       var y: int;
//                      read x ,y;
//      x = 2 * (3+y);
//        end;
//          write 5;    -- Not sure why five, but okay.

// QUESTIONS:
// What is defined as a subgrammar? Are we rewriting Iki?


Iki {
  Program     =  Block
  Block       =  (Stmt ";")+
  Stmt        =  Type ListOf<id, ",">            -- decl
              |  TypeExp assignop Exp            -- assignment
              |  "STDIN" inop TypeExp            -- read
              |  "STDOUT" assignop Exp           -- write
              |  "while" Exp "{" Block "}"       -- while
  Type        =  "int" | "bool"
  Exp         =  Exp "or" Exp1                   -- binary
              |  Exp1
  Exp1        =  Exp1 "and" Exp2                 -- binary
              |  Exp2
  Exp2        =  Exp3 relop Exp3                 -- binary
              |  Exp3
  Exp3        =  Exp3 addop Exp4                 -- binary
              |  Exp4
  Exp4        =  Exp4 mulop Exp5                 -- binary
              |  Exp5
  Exp5        =  prefixop Exp6                   -- unary
              |  Exp6
  Exp6        =  boollit
              |  intlit
              |  TypeExp
              |  "(" Exp ")"                     -- parens
  TypeExp      = id

  keyword     =  ("STDIN" | "STDOUT" | "while" | "{"
              |  "}" | "int" | "bool" | "true" | "false") ~idrest
  id          =  ~keyword letter idrest*
  idrest      =  "_" | alnum
  intlit      =  digit+
  boollit     =  "true" | "false"
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  prefixop    =  ~"--" "-" | "not"
  assignop    = "<-"
  inop        = "->"

  space      +=  comment
  comment     =  "--" (~"\n" any)* "\n"
}

